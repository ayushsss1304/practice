import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler


data = np.sin(np.arange(0, 100, 0.1))  
df = pd.DataFrame(data, columns=['temp'])


scaler = MinMaxScaler()
scaled = scaler.fit_transform(df)


X, y = [], []
for i in range(10, len(scaled)):
    X.append(scaled[i-10:i, 0])
    y.append(scaled[i, 0])

X, y = np.array(X), np.array(y)
X = X.reshape((X.shape[0], X.shape[1], 1)) 


model = Sequential([
    LSTM(50, input_shape=(X.shape[1], 1)),
    Dense(1)
])

model.compile(optimizer='adam', loss='mse',metrics=['mae'])
history=model.fit(X, y, epochs=10, batch_size=16, verbose=1)


last_seq = scaled[-10:].reshape((1, 10, 1))
predicted = model.predict(last_seq)
predicted_temp = scaler.inverse_transform(predicted)
print("Next forecasted temperature:", predicted_temp[0][0])

import matplotlib.pyplot as plt




plt.figure(figsize=(10, 5))
plt.plot(history.history['loss'], label='Loss (MSE)', marker='o')
plt.plot(history.history['mae'], label='MAE', marker='x')
plt.xlabel('Epoch')
plt.ylabel('Value')
plt.title('Model Training Performance')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
